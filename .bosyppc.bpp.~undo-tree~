(undo-tree-save-format-version . 1)
"89ca032c0c27b68c78c8fb2e16f381b933b83783"
[nil nil nil nil (26661 49474 621067 379000) 0 nil]
([nil nil (("
                    code += \"if (0) {}\";" . 7545) (undo-tree-id0 . -41) (undo-tree-id1 . -41) (t 26644 50501 252007 768000)) nil (26661 49474 621063 964000) 0 nil])
([nil nil ((7913 . 7917) (t 26661 49474 621883 359000)) nil (26661 49508 11071 514000) 0 nil])
([nil nil ((7917 . 7918)) nil (26661 49508 11071 160000) 0 nil])
([nil nil (("i" . -7917) (undo-tree-id22 . -1) 7918) nil (26661 49508 11070 379000) 0 nil])
([nil nil ((7917 . 7922)) nil (26661 49508 11069 614000) 0 nil])
([nil nil ((7922 . 7924)) nil (26661 49508 11069 328000) 0 nil])
([nil nil ((" " . -7921) (undo-tree-id19 . -1) ("f" . -7922) (undo-tree-id20 . -1) ("=" . -7923) (undo-tree-id21 . -1) 7924) nil (26661 49508 11068 863000) 0 nil])
([nil nil ((7921 . 7925)) nil (26661 49508 11066 984000) 0 nil])
([nil nil ((7925 . 7926)) nil (26661 49508 11066 731000) 0 nil])
([nil nil (("i" . -7925) (undo-tree-id18 . -1) 7926) nil (26661 49508 11066 397000) 0 nil])
([nil nil ((7925 . 7937)) nil (26661 49508 11065 645000) 0 nil])
([nil nil (("'" . -7936) (undo-tree-id17 . -1) 7937) nil (26661 49508 11065 260000) 0 nil])
([nil nil ((7936 . 7939)) nil (26661 49508 11064 487000) 0 nil])
([nil nil (("n" . -7938) (undo-tree-id16 . -1) 7939) nil (26661 49508 11064 88000) 0 nil])
([nil nil ((7938 . 7940)) nil (26661 49508 11063 321000) 0 nil])
([nil nil (("e" . -7939) (undo-tree-id15 . -1) 7940) nil (26661 49508 11062 365000) 0 nil])
([nil nil ((7939 . 7940)) nil (26661 49508 11061 603000) 0 nil])
([nil nil (("s" . -7938) (undo-tree-id13 . -1) ("l" . -7939) (undo-tree-id14 . -1) 7940) nil (26661 49508 11061 174000) 0 nil])
([nil nil ((7938 . 7945)) nil (26661 49508 11059 775000) 0 nil])
([nil nil ((7944 . 7945)) nil (26661 49508 11059 450000) 0 nil])
([nil nil ((7946 . 7947)) nil (26661 49508 11059 151000) 0 nil])
([nil nil (("." . -7946) (undo-tree-id12 . -1) 7947) nil (26661 49508 11058 700000) 0 nil])
([nil nil ((7946 . 7947)) nil (26661 49508 11057 794000) 0 nil])
([nil nil ((7947 . 7955)) nil (26661 49508 11057 544000) 0 nil])
([nil nil ((7955 . 7962)) nil (26661 49508 11057 248000) 0 nil])
([nil nil (("(" . -7960) (undo-tree-id10 . -1) ("o" . -7961) (undo-tree-id11 . -1) 7962) nil (26661 49508 11056 758000) 0 nil])
([nil nil ((7960 . 7974)) nil (26661 49508 11055 260000) 0 nil])
([nil nil ((" " . -8016) (undo-tree-id6 . -1) ("i" . -8017) (undo-tree-id7 . -1) ("f" . -8018) (undo-tree-id8 . -1) (" " . -8019) (undo-tree-id9 . -1) 8020) nil (26661 49508 11054 370000) 0 nil])
([nil nil (("e" . -8012) (undo-tree-id2 . -1) ("l" . -8013) (undo-tree-id3 . -1) ("s" . -8014) (undo-tree-id4 . -1) ("e" . -8015) (undo-tree-id5 . -1) 8016) nil (26661 49508 11047 899000) 0 nil])
([nil nil ((7960 . 7961) (t 26661 49508 10882 248000)) nil (26661 49532 417434 327000) 0 nil])
([nil nil ((7974 . 7975)) nil (26661 49532 417429 962000) 0 nil])
([nil nil ((7928 . 7929) (t 26661 49532 416881 435000)) nil (26661 49536 728241 269000) 0 nil])
([nil nil ((7947 . 7948)) nil (26661 49536 728236 534000) 0 nil])
([nil nil ((";" . -7948) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) 7949 (t 26661 49536 727881 292000)) nil (26661 49554 259190 664000) 0 nil])
([nil nil ((";" . -7976) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) 7977) nil (26661 49554 259186 611000) 0 nil])
([nil nil ((7975 . 7976)) nil (26661 49554 259015 66000) 0 nil])
([nil nil ((7947 . 7948)) nil (26661 49554 259010 638000) 0 nil])
([nil nil ((6902 . 6905) (t 26661 49554 258880 709000)) nil (26661 49852 349936 358000) 0 nil])
([nil nil ((6905 . 6906)) nil (26661 49852 349935 860000) 0 nil])
([nil nil (("'" . -6905) (undo-tree-id36 . -1) 6906) nil (26661 49852 349935 334000) 0 nil])
([nil nil ((6905 . 6913)) nil (26661 49852 349934 151000) 0 nil])
([nil nil ((6913 . 6916)) nil (26661 49852 349933 765000) 0 nil])
([nil nil ((6916 . 6917)) nil (26661 49852 349933 424000) 0 nil])
([nil nil (("		" . 6914) (undo-tree-id35 . -2) (6916 . 6917)) nil (26661 49852 349932 104000) 0 nil])
([nil nil ((6915 . 6917)) nil (26661 49852 778927 160000) 0 nil])
([nil nil ((6914 . 6916)) nil (26661 49865 344953 633000) 0 nil] [nil nil ((6917 . 6924)) (("       " . 6917)) (26661 49852 349918 898000) 0 nil])
([nil nil ((6916 . 6925)) nil (26661 49865 344953 355000) 0 nil])
nil
([nil nil ((" " . -6924) (undo-tree-id43 . -1) 6925) nil (26661 49865 344952 917000) 0 nil])
([nil nil ((6924 . 6927)) nil (26661 49865 344952 165000) 0 nil])
([nil nil (("+" . -6926) (undo-tree-id42 . -1) 6927) nil (26661 49865 344951 849000) 0 nil])
([nil nil ((6926 . 6936)) nil (26661 49865 344951 184000) 0 nil])
([nil nil ((6936 . 6943)) nil (26661 49865 344950 958000) 0 nil])
([nil nil ((6943 . 6944)) nil (26661 49865 344950 693000) 0 nil])
([nil nil (("e" . -6943) (undo-tree-id41 . -1) 6944) nil (26661 49865 344950 345000) 0 nil])
([nil nil ((6943 . 6946)) nil (26661 49865 344949 516000) 0 nil])
([nil nil (("u" . -6945) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) 6946) nil (26661 49865 344948 612000) 0 nil])
([nil nil ((6945 . 6952)) nil (26662 57102 37757 632000) 0 nil])
([nil nil (("
let macros = {};
let modules = {};
let cmodule = undefined;
let types = {};
let usings = [];

" . 2709) (undo-tree-id4 . -95) (undo-tree-id5 . -95) (t 26661 49865 349870 355000)) nil (26662 57129 36988 21000) 0 nil] [nil nil (("		    " . -12227) (12226 . 12227) (t 26661 49865 349870 355000)) (("
" . 12226) (12227 . 12233)) (26662 57101 127328 39000) 0 nil])
([nil nil (("
" . -2708) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) 2709) nil (26662 57129 36986 799000) 0 nil])
nil
([nil nil ((2708 . 2709)) nil (26662 57129 36984 810000) 0 nil])
([nil nil ((3753 . 3754)) nil (26662 57129 36984 351000) 0 nil])
([nil nil ((3753 . 3754)) nil (26662 57129 36982 415000) 0 nil])
([nil nil ((3753 . 3848)) nil (26662 57129 36981 998000) 0 nil])
([nil nil (("
" . -3847) (undo-tree-id0 . -1) 3848) nil (26662 57129 36978 257000) 0 nil])
([nil nil (("
" . -3846) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) 3847 (t 26662 57129 36529 382000)) nil (26665 49600 579567 234000) 0 nil])
([nil nil ((5187 . 5630) (t 26662 57130 134529 439000)) nil (26665 49639 586926 269000) 0 nil] [nil nil ((" (obj.value) {
                \"include\" {
                    obj = ast[i + 1];
                    if (obj.type != \"string\") {
                        print(\"Excepted <include \\\"\\\"> but got <include \" + obj.value + \">\");
                        exit(1);
                    }
                    code += \"\\n\" + compiler_ast(parser(lexer(fs.readFileSync(obj.value, 'utf8')))) + \"\\n\";
                    i++;
                    continue;
                }" . 4730) (undo-tree-id0 . -457) (undo-tree-id1 . -457) (undo-tree-id2 . -427) (undo-tree-id3 . -427) (t 26662 57130 134529 439000)) ((4730 . 5187)) (26665 49599 850493 617000) 0 nil])
([nil nil ((5212 . 5214)) nil (26665 49639 586925 769000) 0 nil])
nil
([nil nil (("l" . -5493) (undo-tree-id12 . -1) ("e" . -5494) (undo-tree-id13 . -1) ("r" . -5495) (undo-tree-id14 . -1) ("_" . -5496) (undo-tree-id15 . -1) ("a" . -5497) (undo-tree-id16 . -1) ("s" . -5498) (undo-tree-id17 . -1) ("t" . -5499) (undo-tree-id18 . -1) ("(" . -5500) (undo-tree-id19 . -1) ("p" . -5501) (undo-tree-id20 . -1) ("a" . -5502) (undo-tree-id21 . -1) ("r" . -5503) (undo-tree-id22 . -1) ("s" . -5504) (undo-tree-id23 . -1) ("e" . -5505) (undo-tree-id24 . -1) ("r" . -5506) (undo-tree-id25 . -1) ("(" . -5507) (undo-tree-id26 . -1) ("l" . -5508) (undo-tree-id27 . -1) ("e" . -5509) (undo-tree-id28 . -1) ("x" . -5510) (undo-tree-id29 . -1) ("e" . -5511) (undo-tree-id30 . -1) ("r" . -5512) (undo-tree-id31 . -1) ("(" . -5513) (undo-tree-id32 . -1) 5514) nil (26665 49639 586924 328000) 0 nil])
([nil nil (("c" . -5488) (undo-tree-id7 . -1) ("o" . -5489) (undo-tree-id8 . -1) ("m" . -5490) (undo-tree-id9 . -1) ("p" . -5491) (undo-tree-id10 . -1) ("i" . -5492) (undo-tree-id11 . -1) 5493) nil (26665 49639 586846 372000) 0 nil])
([nil nil ((")" . -5522) (undo-tree-id4 . -1) (")" . -5523) (undo-tree-id5 . -1) (")" . -5524) (undo-tree-id6 . -1) 5525) nil (26665 49639 586840 120000) 0 nil])
([nil nil (("fn lexer(code) {
    const tokens = [];
    let pos = 0;
    while (pos < code.length) {
        let char = code[pos];
        if (/\\s/.test(char)) {
            pos++;
            continue;
        }
        if (/[0-9]/.test(char) || (char == '-' && /[0-9]/.test(code[pos + 1]))) {
            let start = pos;
            pos++;
            while (/[0-9]/.test(code[pos]) || code[pos] == 'x' || code[pos] == 'b' || code[pos] == '.') {
                pos++;
            }
            tokens.push(code.slice(start, pos));
            continue;
        }
        if (char == \"/\" && code[pos + 1] == \"/\") { // Test
            pos += 2;
            while (code[pos] != \"\\n\") {
                pos++;
            }
            pos++;
            continue;
        }
        if (char == \"/\" && code[pos + 1] == \"*\") { /* Test */
            pos += 2;
            while (code[pos] != \"*\" || code[pos + 1] != \"/\") {
                pos++;
            }
            pos += 2;
            continue;
        }
        if (char == \"\\\"\" || char == \"'\") {
            pos++;
            let value = \"\";
            while (pos < code.length && code[pos] != char) {
                if (code[pos] == '\\\\') {
                    pos++;
                    switch (code[pos]) {
                        case \"\\\"\": value += \"\\\\\\\"\"; break;
                        case \"'\": value += \"\\\\'\"; break;
                        case 'n': value += '\\\\n'; break;
                        case 't': value += '\\\\t'; break;
                        case 'r': value += '\\\\r'; break;
                        case '\\\\': value += '\\\\\\\\'; break;
                        default: value += '\\\\'; value += code[pos]; break;
                    }
                    pos++;
                }
                else {
                    value += code[pos];
                    pos++;
                }
            }
            pos++;
            tokens.push(char + value + char);
            continue;
        }
        if (\"!@#$%^&*()-+=_{}[]|:;<>,.?/\\\\\".indexOf(char) != -1) {
            let value = char;
            if ((char == '!' || char == '=' || char == '<' || char == '>' || char == '+' || char == '-' || char == '*' || char == '/') && code[pos + 1] == '=') {
                value += code[++pos];
            }
            pos++;
            tokens.push(value);
            continue;
        }
        if (/[a-zA-Z_]/.test(char)) {
            let start = pos;
            while (/[a-zA-Z0-9_]/.test(code[pos])) {
                pos++;
            }
            tokens.push(code.slice(start, pos));
            continue;
        }
        tokens.push(char);
        pos++;
    }
    return tokens;
}
" . 39) (undo-tree-id33 . -2670) (undo-tree-id34 . -16) (undo-tree-id35 . -16) (undo-tree-id36 . -1585) (undo-tree-id37 . -1585) (undo-tree-id38 . -1585) (undo-tree-id39 . -2667) (undo-tree-id40 . -2667) (undo-tree-id41 . -2667) (undo-tree-id42 . -2667) (undo-tree-id43 . -2667) (undo-tree-id44 . -2670) (undo-tree-id45 . -2670) (undo-tree-id46 . -2670) (undo-tree-id47 . -2670) (undo-tree-id48 . -2670) (t 26665 49639 586484 732000)) nil (26665 49934 943343 624000) 0 nil])
([nil nil ((39 . 40) (t 26665 49934 943500 80000)) nil (26665 49946 925915 254000) 0 nil])
([nil nil ((39 . 40)) nil (26665 49946 925914 899000) 0 nil])
([nil nil ((40 . 50)) nil (26665 49946 925914 557000) 0 nil])
([nil nil ((49 . 51)) nil (26665 49946 925914 251000) 0 nil])
([nil nil (("\"" . -48) (undo-tree-id52 . -1) ("6" . -49) (undo-tree-id53 . -1) ("t" . -50) (undo-tree-id54 . -1) 51) nil (26665 49946 925913 847000) 0 nil])
([nil nil ((48 . 49)) nil (26665 49946 925911 901000) 0 nil])
([nil nil ((" " . -48) (undo-tree-id51 . -1) 49) nil (26665 49946 925911 686000) 0 nil])
([nil nil ((48 . 51)) nil (26665 49946 925910 279000) 0 nil])
([nil nil ((51 . 53)) nil (26665 49946 925909 877000) 0 nil])
([nil nil (("c" . -51) (undo-tree-id49 . -1) ("x" . -52) (undo-tree-id50 . -1) 53) nil (26665 49946 925909 230000) 0 nil])
([nil nil ((51 . 58)) nil (26665 49946 925899 442000) 0 nil])
([nil nil (("
fn parser(toks, state = 0) {
    let ast = [];
    while (toks.length) {
        const tok = toks[0];
        toks = toks.slice(1);
        if (/[0-9]/.test(tok[0]) || tok[0] == '-' && /[0-9]/.test(tok[1])) {
            ast.push({\"type\": \"number\", \"value\": Number(tok)});
        }
        elif (tok[0] == \"\\\"\" || tok[0] == \"'\") {
            ast.push({\"type\": \"string\", \"value\": tok.substr(1, tok.length - 2)});
        }
        elif (state == 1 && tok == \")\") {
            break;
        }
        elif (state == 2 && tok == \"}\") {
            break;
        }
        elif (tok == \"(\") {
            const inner = parser(toks, 1);
            toks = inner.tokens;
            ast.push({\"type\": \"expr\", \"value\": inner.ast});
        }
        elif (tok == \"{\") {
            const inner = parser(toks, 2);
            toks = inner.tokens;
            ast.push({\"type\": \"block\", \"value\": inner.ast});
        }
        else {
            ast.push({\"type\": \"word\", \"value\": tok});
        }
    }
    return {\"ast\": ast, \"tokens\": toks};
}
" . 60) (undo-tree-id55 . -1044) (undo-tree-id56 . -1044) (undo-tree-id57 . -1044) (undo-tree-id58 . -1044) 1104 (t 26665 49946 925500 702000)) nil (26665 49975 968136 937000) 0 nil])
([nil nil ((60 . 61) (t 26665 49975 968502 212000)) nil (26665 49998 574446 330000) 0 nil])
([nil nil ((60 . 62)) nil (26665 49998 574445 862000) 0 nil])
([nil nil (("
" . -61) (undo-tree-id73 . -1) (undo-tree-id74 . 1) 62) nil (26665 49998 574445 398000) 0 nil])
([nil nil ((61 . 65)) nil (26665 49998 574444 211000) 0 nil])
([nil nil (("l" . -63) (undo-tree-id71 . -1) ("c" . -64) (undo-tree-id72 . -1) 65) nil (26665 49998 574443 726000) 0 nil])
([nil nil ((63 . 66)) nil (26665 49998 574442 527000) 0 nil])
([nil nil (("p" . -64) (undo-tree-id69 . -1) ("u" . -65) (undo-tree-id70 . -1) 66) nil (26665 49998 574442 40000) 0 nil])
([nil nil ((64 . 67)) nil (26665 49998 574439 950000) 0 nil])
([nil nil (("u" . -65) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) ("s" . -66) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) 67) nil (26665 49998 574439 415000) 0 nil])
([nil nil ((65 . 66)) nil (26665 49998 574434 861000) 0 nil])
([nil nil (("d" . -65) (undo-tree-id59 . -1) 66) nil (26665 49998 574433 973000) 0 nil])
([nil nil ((65 . 81)) nil (26665 49998 574423 495000) 0 nil])
([nil nil (("
let modules = {};
let cmodule = undefined;" . 99) (undo-tree-id315 . -43) (undo-tree-id316 . -43) (t 26665 49998 574503 386000)) nil (26665 50108 472267 504000) 0 nil])
([nil nil (("
let usings = [];
" . 115) (undo-tree-id314 . -18)) nil (26665 50108 472266 204000) 0 nil])
([nil nil ((115 . 116)) nil (26665 50108 472265 475000) 0 nil])
([nil nil (("
                \"module\" {
                    i++;
                    const name = compiler_ast(ast[i]).value;
                    i++;
                    cmodule = name;
                    modules[cmodule] = [];
                    code += \"const \" + name + \" = \" + compiler_ast(ast[i]).value + \";\";
                    cmodule = undefined;
                    continue;
                }
                " . -4916) (undo-tree-id313 . -411) 5327) nil (26665 50108 472265 138000) 0 nil])
([nil nil ((4916 . 4919)) nil (26665 50108 472264 350000) 0 nil])
([nil nil (("
                    }
                    else {
                        modules[cmodule].push(name);
                        code += \"// Enum (\" + name + \")\\n\";
                        code += name + \": {\";
                        for (let j = 0; j < ast[i].value.length; ++j) {
                            const f = compiler_ast(ast[i].value[j]);
                            if (f.type == \"word\") {
                                code += f.value + \": \" + j + \",\";
                                code += j + \": \\\"\" + f.value + \"\\\",\";
                            }
                        }
                        code += \"},\"" . -5627) (undo-tree-id310 . -630) (undo-tree-id311 . -22) (undo-tree-id312 . -22) 6257) nil (26665 50108 472263 277000) 0 nil])
([nil nil (("
                    }" . 5628) (undo-tree-id309 . -22)) nil (26665 50108 472261 516000) 0 nil])
([nil nil ((";" . -5627) (undo-tree-id307 . -1) (undo-tree-id308 . -1) 5628) nil (26665 50108 472260 688000) 0 nil])
([nil nil (("
                    if (cmodule == undefined) {" . 5038) (undo-tree-id306 . -48)) nil (26665 50108 472259 361000) 0 nil])
([nil nil (("    " . -5498) ("    " . -5476) ("        " . -5454) ("            " . -5396) ("            " . -5342) ("        " . -5298) ("        " . -5237) ("    " . -5169) ("    " . -5115) ("    " . -5059) 5579) nil (26665 50108 472258 349000) 0 nil])
([nil nil ((5114 . 5118)) nil (26665 50108 472257 474000) 0 nil])
([nil nil ((5173 . 5179)) nil (26665 50108 472257 224000) 0 nil])
([nil nil ((5179 . 5181)) nil (26665 50108 472256 907000) 0 nil])
([nil nil ((5249 . 5261)) nil (26665 50108 472256 366000) 0 nil])
([nil nil ((5322 . 5334)) nil (26665 50108 472256 61000) 0 nil])
([nil nil ((5378 . 5392)) nil (26665 50108 472255 787000) 0 nil])
([nil nil ((5392 . 5394)) nil (26665 50108 472255 275000) 0 nil])
([nil nil ((5448 . 5464)) nil (26665 50108 472254 964000) 0 nil])
([nil nil ((5522 . 5536)) nil (26665 50108 472254 529000) 0 nil])
([nil nil ((" " . -5534) (undo-tree-id304 . -1) (" " . -5535) (undo-tree-id305 . -1) 5536) nil (26665 50108 472253 955000) 0 nil])
([nil nil ((5535 . 5540)) nil (26665 50108 472252 544000) 0 nil])
([nil nil (("	" . -5538) (undo-tree-id302 . -1) ("	" . -5539) (undo-tree-id303 . -1) 5540) nil (26665 50108 472251 986000) 0 nil])
([nil nil ((5538 . 5551)) nil (26665 50108 472250 669000) 0 nil])
([nil nil ((5551 . 5559)) nil (26665 50108 472250 321000) 0 nil])
([nil nil ((" " . -5556) (undo-tree-id299 . -1) (" " . -5557) (undo-tree-id300 . -1) (" " . -5558) (undo-tree-id301 . -1) 5559) nil (26665 50108 472249 735000) 0 nil])
([nil nil ((" " . -5115) (undo-tree-id295 . -1) (" " . -5116) (undo-tree-id296 . -1) (" " . -5117) (undo-tree-id297 . -1) (" " . -5118) (undo-tree-id298 . -1) 5119) nil (26665 50108 472247 262000) 0 nil])
([nil nil ((" " . -5173) (undo-tree-id291 . -1) (" " . -5174) (undo-tree-id292 . -1) (" " . -5175) (undo-tree-id293 . -1) (" " . -5176) (undo-tree-id294 . -1) 5177) nil (26665 50108 472244 914000) 0 nil])
([nil nil ((" " . -5247) (undo-tree-id287 . -1) (" " . -5248) (undo-tree-id288 . -1) (" " . -5249) (undo-tree-id289 . -1) (" " . -5250) (undo-tree-id290 . -1) 5251) nil (26665 50108 472242 308000) 0 nil])
([nil nil ((" " . -5318) (undo-tree-id284 . -1) (" " . -5319) (undo-tree-id285 . -1) (" " . -5320) (undo-tree-id286 . -1) 5321) nil (26665 50108 472240 29000) 0 nil])
([nil nil ((" " . -5316) (undo-tree-id282 . -1) (" " . -5317) (undo-tree-id283 . -1) 5318) nil (26665 50108 472238 120000) 0 nil])
([nil nil ((5316 . 5317)) nil (26665 50108 472236 872000) 0 nil])
([nil nil ((" " . -5368) (undo-tree-id278 . -1) (" " . -5369) (undo-tree-id279 . -1) (" " . -5370) (undo-tree-id280 . -1) (" " . -5371) (undo-tree-id281 . -1) 5372) nil (26665 50108 472236 226000) 0 nil])
([nil nil ((" " . -5508) (undo-tree-id274 . -1) (" " . -5509) (undo-tree-id275 . -1) (" " . -5510) (undo-tree-id276 . -1) (" " . -5511) (undo-tree-id277 . -1) 5512) nil (26665 50108 472233 659000) 0 nil])
([nil nil ((" " . -5436) (undo-tree-id270 . -1) (" " . -5437) (undo-tree-id271 . -1) (" " . -5438) (undo-tree-id272 . -1) (" " . -5439) (undo-tree-id273 . -1) 5440) nil (26665 50108 472231 313000) 0 nil])
([nil nil ((" " . -5518) (undo-tree-id266 . -1) (" " . -5519) (undo-tree-id267 . -1) (" " . -5520) (undo-tree-id268 . -1) (" " . -5521) (undo-tree-id269 . -1) 5522) nil (26665 50108 472229 32000) 0 nil])
([nil nil (("
" . -5519) (undo-tree-id261 . -1) ("	" . -5520) (undo-tree-id262 . -1) ("	" . -5521) (undo-tree-id263 . -1) ("	" . -5522) (undo-tree-id264 . -1) (" " . -5523) (undo-tree-id265 . -1) 5524) nil (26665 50108 472226 636000) 0 nil])
([nil nil (("
                    }" . 5519) (undo-tree-id258 . -22) (undo-tree-id259 . -22) (undo-tree-id260 . -22)) nil (26665 50108 472223 563000) 0 nil])
([nil nil ((" " . -5168) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (" " . -5169) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (" " . -5170) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (" " . -5171) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) 5172) nil (26665 50108 472220 448000) 0 nil])
([nil nil ((" " . -5239) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (" " . -5240) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (" " . -5241) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (" " . -5242) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) 5243) nil (26665 50108 472199 978000) 0 nil])
([nil nil ((" " . -5303) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (" " . -5304) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (" " . -5305) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (" " . -5306) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) 5307) nil (26665 50108 472186 671000) 0 nil])
([nil nil ((" " . -5350) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (" " . -5351) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (" " . -5352) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (" " . -5353) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) 5354) nil (26665 50108 472176 94000) 0 nil])
([nil nil ((" " . -5418) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (" " . -5419) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (" " . -5420) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (" " . -5421) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) 5422) nil (26665 50108 472165 627000) 0 nil])
([nil nil ((" " . -5480) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (" " . -5481) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (" " . -5482) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (" " . -5483) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) 5484) nil (26665 50108 472153 718000) 0 nil])
([nil nil ((" " . -5490) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (" " . -5491) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (" " . -5492) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (" " . -5493) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) 5494) nil (26665 50118 472931 942000) 0 nil])
([nil nil (("
                    }
                    else {
                        modules[cmodule].push(name);
                        code += name + \": function (\";
                    }" . 6018) (undo-tree-id451 . -179) (undo-tree-id452 . -49) (undo-tree-id453 . -49) (undo-tree-id454 . -49) (undo-tree-id455 . -179) (undo-tree-id456 . -179) (undo-tree-id457 . -179) (undo-tree-id458 . -157) (undo-tree-id459 . -157) (undo-tree-id460 . -102) (undo-tree-id461 . -102) (undo-tree-id462 . -179) (undo-tree-id463 . -179) (undo-tree-id464 . -179) (undo-tree-id465 . -179) (t 26665 50108 473509 97000)) nil (26665 50142 668920 498000) 0 nil] [nil nil (("
                    if (cmodule == undefined) {
                        code += \"function \" + name + \"(\";
                    }
                    else {" . 5912) (undo-tree-id321 . -155) (undo-tree-id322 . -155) (undo-tree-id323 . -155) (undo-tree-id324 . -155) (t 26665 50108 473509 97000)) ((5912 . 6067)) (26665 50118 356473 530000) 0 nil])
([nil nil (("
                    if (cmodule == undefined) {" . 5912) (undo-tree-id447 . -48) (undo-tree-id448 . -48) (undo-tree-id449 . -48) (undo-tree-id450 . -48)) nil (26665 50142 668914 146000) 0 nil])
([nil nil (("
                    }" . 6020) (undo-tree-id317 . -22) (undo-tree-id318 . -22) (undo-tree-id319 . -22) (undo-tree-id320 . -22)) ((6020 . 6042)) (26665 50117 926157 884000) 0 nil])
([nil nil ((5970 . 5971)) nil (26665 50142 668911 708000) 0 nil])
([nil nil (("    " . -5982) ("    " . -5933) 5965) ((5933 . 5937) (5982 . 5986)) (26665 50116 862653 122000) 0 nil])
([nil nil ((5970 . 5972) ("	" . 5970) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) 5971) nil (26665 50142 668910 728000) 0 nil])
nil
([nil nil ((5970 . 5973) ("		" . 5970) (undo-tree-id408 . -2) 5972) nil (26665 50142 668895 584000) 0 nil])
([nil nil ((5970 . 5974) ("			" . 5970) (undo-tree-id407 . -3) 5973) nil (26665 50142 668894 770000) 0 nil])
([nil nil ((";" . -5969) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) ("	" . -5970) (undo-tree-id403 . -1) ("	" . -5971) (undo-tree-id404 . -1) ("	" . -5972) (undo-tree-id405 . -1) ("	" . -5973) (undo-tree-id406 . -1) 5974) nil (26665 50142 668892 673000) 0 nil])
([nil nil ((5969 . 5970)) nil (26665 50142 668860 35000) 0 nil])
([nil nil ((5913 . 5917) ("                        " . 5913) (undo-tree-id329 . -24) (undo-tree-id330 . -24) (undo-tree-id331 . -24) (undo-tree-id332 . -24) (undo-tree-id333 . -24) (undo-tree-id334 . -24) 5937) nil (26665 50142 668859 452000) 0 nil])
([nil nil ((5913 . 5918) ("				" . 5913) (undo-tree-id328 . -4) 5917) nil (26665 50142 668856 417000) 0 nil])
([nil nil (("	" . -5915) (undo-tree-id325 . -1) ("	" . -5916) (undo-tree-id326 . -1) ("	" . -5917) (undo-tree-id327 . -1) 5918) nil (26665 50142 668854 799000) 0 nil])
([nil nil ((5915 . 5919)) nil (26665 50142 668843 422000) 0 nil])
([nil nil (("
        for (let j = 0; j < usings.length; ++j) {
            if (modules[usings[j]]) {
                if (modules[usings[j]].indexOf(obj.value) != -1) {
                    code += usings[j] + \".\";
                    break;
                }
            }
        }" . -7754) (undo-tree-id521 . -269) (undo-tree-id522 . -259) 8023 (t 26665 50142 669510 874000)) nil (26665 50174 12200 141000) 0 nil])
([nil nil (("
                \"using\" {
                    usings.push(ast[i + 1].value);
                    i++;
                    continue;
                }" . 3324) (undo-tree-id520 . -150)) nil (26665 50174 12198 826000) 0 nil])
([nil nil (("
                    if (cmodule == undefined) {" . 2952) (undo-tree-id514 . -48) (undo-tree-id515 . -48) (undo-tree-id516 . -48) (undo-tree-id517 . -48) (undo-tree-id518 . -48) (undo-tree-id519 . -48)) nil (26665 50174 12198 41000) 0 nil])
([nil nil (("
                    }
                    else {
                        modules[cmodule].push(ast[i + 1].value);
                        code += ast[i + 1].value + \": function \";
                        i++;
                    }" . -2997) (undo-tree-id510 . -231) (undo-tree-id511 . -48) (undo-tree-id512 . -231) (undo-tree-id513 . -231) 3228) nil (26665 50174 12195 189000) 0 nil])
([nil nil ((" " . -2973) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (" " . -2974) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (" " . -2975) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (" " . -2976) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) 2977) nil (26665 50209 303560 42000) 0 nil])
([nil nil (("
                    }
                    else {
                        modules[cmodule].push(ast[i + 1].value);
                        code += ast[i + 1].value + \": \";
                        i += 2;
                    }" . 2324) (undo-tree-id559 . -225) (undo-tree-id560 . -225)) ((2324 . 2549)) (26665 50209 643459 368000) 0 nil])
([nil nil (("
                    if (cmodule == undefined) {" . 2236)) ((2236 . 2284)) (26665 50209 845220 338000) 0 nil])
([nil nil (("    " . 2257)) ((2257 . 2261) (t 26665 50181 907512 913000)) (26665 50219 718696 141000) 0 nil])
([nil nil ((39 . 12666) ("
include \"lexer.bpp\"

include \"parser.bpp\"

let macros = {};
let types = {};

fn compiler_ast(ast) {
    let code = \"\";
    let currt = null;
    if (ast.type) {
        match (ast.type) {
            \"expr\" {
                return {type:\"expr\", value:\"(\" + compiler_ast(ast.value) + \")\"};
            }
            \"block\" {
                return {type:\"block\", value:\"{\" + compiler_ast(ast.value) + \"}\"};
            }
            \"string\" {
                return {type:\"string\", value:\"\\\"\"+ast.value+\"\\\"\"};
            }
            \"number\" {
                return {type:\"number\", value:ast.value};
            }
            \"word\" {
                return {type:\"word\", value:ast.value};
            }
        }
        return undefined;
    }
    if (ast && ast.ast) ast = ast.ast;
    for (let i = 0; i < ast.length; ++i) {
        let obj = compiler_ast(ast[i]);
        ifdef DEBUG {print(obj);}
        if (obj.type == \"word\") {
            match (obj.value) {
                \"include\" {
                    obj = ast[i + 1];
                    if (obj.type != \"string\") {
                        print(\"Excepted <include \\\"\\\"> but got <include \" + obj.value + \">\");
                        exit(1);
                    }
                    code += \"\\n\" + compiler_ast(parser(lexer(fs.readFileSync(obj.value, 'utf8')))) + \"\\n\";
                    i++;
                    continue;
                }
                \"includejs\" {
                    obj = ast[i + 1];
                    if (obj.type != \"string\") {
                        print(\"Excepted <include \\\"\\\"> but got <include \" + obj.value + \">\");
                        exit(1);
                    }
                    code += \"\\n\" + fs.readFileSync(obj.value, 'utf8') + \"\\n\";
                    i++;
                    continue;
                }
                \"class\" {
                    code += \"class \";
                    continue;
                }
                \"extends\" {
                    code += \"extends \";
                    continue;
                }
                \"const\" {
                    code += \"const \";
                    continue;
                }
                \"let\" {
                    code += \"let \";
                    continue;
                }
                \"var\" {
                    code += \"let \";
                    continue;
                }
                \"case\" {
                    code += \"case \";
                    continue;
                }
                \"return\" {
                    code += \"return \";
                    continue;
                }
                \"fn\" {
                    code += \"function \";
                    continue;
                }
                \"elif\" {
                    code += \"else if \";
                    continue;
                }
		\"else\" {
		    code += \"else \";
		    continue;
		}
                \"ifdef\" {
                    if (macros[ast[i + 1].value] != undefined) {
                        code += compiler_ast(ast[i + 2]).value;
                    }
                    i += 2;
                    continue
                }
                \"ifndef\" {
                    if (macros[ast[i + 1].value] == undefined) {
                        code += compiler_ast(ast[i + 2]).value;
                    }
                    i += 2;
                    continue
                }
                \"match\" {
                    i++;
                    const value = compiler_ast(ast[i]).value;
                    i++;
                    for (let j = 0; j < ast[i].value.length; j += 2) {
                        const f = compiler_ast(ast[i].value[j]).value;
                        const d = ast[i].value[j+1];
                        if (f == \"_\") {
                            code += \"else {\" + compiler_ast(d).value + \"}\";
                        }
                        else {
			    if (j) {code += \"else if \";}
			    else {code += \"if \";}
                            code += \"((\" + value + \") === \" + f + \") {\" + compiler_ast(d).value + \"}\";
                        }
                    }
                    continue;
                }
		\"enum\" {
                    i++;
                    const name = compiler_ast(ast[i]).value;
                    i++;
                    code += \"// Enum (\" + name + \")\\n\";
                    code += \"const \" + name + \" = {\";
                    for (let j = 0; j < ast[i].value.length; ++j) {
                        const f = compiler_ast(ast[i].value[j]);
                        if (f.type == \"word\") {
                            code += f.value + \": \" + j + \",\";
                            code += j + \": \\\"\" + f.value + \"\\\",\";
                        }
		    }
                    code += \"};\";
                    continue;
                }
                \"struct\" {
                    i++;
                    const name = compiler_ast(ast[i]).value;
                    i++;
                    let fields = [];
                    for (let j = 0; j < ast[i].value.length; ++j) {
                        fields.push(compiler_ast(ast[i].value[j]).value);
                    }
		    code += \"function \" + name + \"(\";
                    for (let j = 0; j < fields.length; ++j) {
                        code += \"_\" + fields[j];
                        if (j != fields.length - 1) {
                            code += \", \";
                        }
                    }
                    code += \") { return {\";
                    for (let j = 0; j < fields.length; ++j) {
                        code += fields[j] + \": _\" + fields[j];
                        if (j != fields.length - 1) {
                            code += \", \";
                        }
                    }
                    code += \"}; }\";
                    continue;
                }
                \";\" {
                    code += \";\\n\";
                    continue;
                }
                \"{\" {
                    code += \"{\\n\";
                    continue;
                }
                \"}\" {
                    code += \"}\\n\";
                    continue;
                }
                \"def\" {
                    const name = compiler_ast(ast[i + 1]).value;
                    const expands = ast[i + 2].value;
                    macros[name] = expands;
                    i += 2;
                    continue;
                }
                \"undef\" {
                    const name = compiler_ast(ast[i + 1]).value;
                    macros[name] = undefined;
                    i++;
                    continue;
                }
		\"==\" {
		     code += \"===\";
		     continue;
		}
		\"!=\" {
		     code += \"!==\";
		     continue;
		}
		_ {
		    if (macros[obj.value] != undefined) {
		        code += compiler_ast(macros[obj.value]);
		        continue;
		    }
		}
            }
        }
        elif (obj.type == \"string\") {
            code += obj.value;
            continue;" . 39) (undo-tree-id22 . -1973) (undo-tree-id23 . -1417) (undo-tree-id24 . -642) (undo-tree-id25 . -1370) (undo-tree-id26 . -21) (undo-tree-id27 . -60) (undo-tree-id28 . -2725) (undo-tree-id29 . -2660) (undo-tree-id30 . -2677) (undo-tree-id31 . -2677) (undo-tree-id32 . -2636) (undo-tree-id33 . -2636) (undo-tree-id34 . -2677) (undo-tree-id35 . -2657) (undo-tree-id36 . -2233) (undo-tree-id37 . -2197) (undo-tree-id38 . -2197) (undo-tree-id39 . -512) (undo-tree-id40 . -908) (undo-tree-id41 . -790) (undo-tree-id42 . -642) (undo-tree-id43 . -1370) (undo-tree-id44 . -1370) (t 26665 50181 907512 913000)) nil (26665 52740 358150 352000) 0 nil] [nil nil ((2012 . 2197) (t 26665 50181 907512 913000)) (("                return {type:\"block\", value:\"{\" + compiler_ast(ast.value) + \"}\"};
            }
            \"string\" {
                return {type:\"string\", value:\"\\\"\"+ast.value+\"\\\"\"};" . 2012) (undo-tree-id561 . -185) (undo-tree-id562 . -185) (undo-tree-id563 . -185)) (26665 50219 376213 832000) 0 nil] [nil nil ((947 . 1132) (t 26665 50181 907512 913000)) (("                return {type:\"block\", value:\"{\" + compiler_ast(ast.value) + \"}\"};
            }
            \"string\" {
                return {type:\"string\", value:\"\\\"\"+ast.value+\"\\\"\"};" . 947) (undo-tree-id557 . -185) (undo-tree-id558 . -185)) (26665 50207 683454 552000) 0 nil])
([nil nil (("fn lexer(code) {
    const tokens = [];
    let pos = 0;
    while (pos < code.length) {
        let char = code[pos];
        if (/\\s/.test(char)) {
            pos++;
            continue;
        }
        if (/[0-9]/.test(char) || (char == '-' && /[0-9]/.test(code[pos + 1]))) {
            let start = pos;
            pos++;
            while (/[0-9]/.test(code[pos]) || code[pos] == 'x' || code[pos] == 'b' || code[pos] == '.') {
                pos++;
            }
            tokens.push(code.slice(start, pos));
            continue;
        }
        if (char == \"/\" && code[pos + 1] == \"/\") { // Test
            pos += 2;
            while (code[pos] != \"\\n\") {
                pos++;
            }
            pos++;
            continue;
        }
        if (char == \"/\" && code[pos + 1] == \"*\") { /* Test */
            pos += 2;
            while (code[pos] != \"*\" || code[pos + 1] != \"/\") {
                pos++;
            }
            pos += 2;
            continue;
        }
        if (char == \"\\\"\" || char == \"'\") {
            pos++;
            let value = \"\";
            while (pos < code.length && code[pos] != char) {
                if (code[pos] == '\\\\') {
                    pos++;
                    switch (code[pos]) {
                        case \"\\\"\": value += \"\\\\\\\"\"; break;
                        case \"'\": value += \"\\\\'\"; break;
                        case 'n': value += '\\\\n'; break;
                        case 't': value += '\\\\t'; break;
                        case 'r': value += '\\\\r'; break;
                        case '\\\\': value += '\\\\\\\\'; break;
                        default: value += '\\\\'; value += code[pos]; break;
                    }
                    pos++;
                }
                else {
                    value += code[pos];
                    pos++;
                }
            }
            pos++;
            tokens.push(char + value + char);
            continue;
        }
        if (\"!@#$%^&*()-+=_{}[]|:;<>,.?/\\\\\".indexOf(char) != -1) {
            let value = char;
            if ((char == '!' || char == '=' || char == '<' || char == '>' || char == '+' || char == '-' || char == '*' || char == '/') && code[pos + 1] == '=') {
                value += code[++pos];
            }
            pos++;
            tokens.push(value);
            continue;
        }
        if (/[a-zA-Z_]/.test(char)) {
            let start = pos;
            while (/[a-zA-Z0-9_]/.test(code[pos])) {
                pos++;
            }
            tokens.push(code.slice(start, pos));
            continue;
        }
        tokens.push(char);
        pos++;
    }
    return tokens;
}
" . -39) (undo-tree-id17 . -764) (undo-tree-id18 . -1492) (undo-tree-id19 . -1492) (undo-tree-id20 . -2670) (undo-tree-id21 . -2401) 2709 (t 26665 52610 143639 92000)) nil (26665 52740 358139 751000) 0 nil])
nil
([nil nil ((829 . 1014) 1132) (("                return {type:\"block\", value:\"{\" + compiler_ast(ast.value) + \"}\"};
            }
            \"string\" {
                return {type:\"string\", value:\"\\\"\"+ast.value+\"\\\"\"};" . 829) (undo-tree-id554 . -185) (undo-tree-id555 . -185) (undo-tree-id556 . -185)) (26665 50207 347071 816000) 0 nil])
([nil nil (("let modules = {};
let cmodule = undefined;
" . -57) (undo-tree-id14 . -43) (undo-tree-id15 . -18) (undo-tree-id16 . -18) 100) nil (26665 52740 358137 319000) 0 nil])
nil
([nil nil (("let usings = [];
" . -73) (undo-tree-id11 . -17) (undo-tree-id12 . -17) (undo-tree-id13 . -17) 90) nil (26665 52740 358135 323000) 0 nil])
([nil nil (("

fn parser(toks, state = 0) {
    let ast = [];
    while (toks.length) {
        const tok = toks[0];
        toks = toks.slice(1);
        if (/[0-9]/.test(tok[0]) || tok[0] == '-' && /[0-9]/.test(tok[1])) {
            ast.push({\"type\": \"number\", \"value\": Number(tok)});
        }
        elif (tok[0] == \"\\\"\" || tok[0] == \"'\") {
            ast.push({\"type\": \"string\", \"value\": tok.substr(1, tok.length - 2)});
        }
        elif (state == 1 && tok == \")\") {
            break;
        }
        elif (state == 2 && tok == \"}\") {
            break;
        }
        elif (tok == \"(\") {
            const inner = parser(toks, 1);
            toks = inner.tokens;
            ast.push({\"type\": \"expr\", \"value\": inner.ast});
        }
        elif (tok == \"{\") {
            const inner = parser(toks, 2);
            toks = inner.tokens;
            ast.push({\"type\": \"block\", \"value\": inner.ast});
        }
        else {
            ast.push({\"type\": \"word\", \"value\": tok});
        }
    }
    return {\"ast\": ast, \"tokens\": toks};
}
" . -73) (undo-tree-id8 . -1045) (undo-tree-id9 . -1) (undo-tree-id10 . -1) 1118) nil (26665 52740 358133 615000) 0 nil])
([nil nil ((73 . 74)) nil (26665 52740 358131 496000) 0 nil])
([nil nil ((39 . 40)) nil (26665 52740 358131 210000) 0 nil])
([nil nil ((40 . 41)) nil (26665 52740 358130 823000) 0 nil])
([nil nil ((40 . 54)) nil (26665 52740 358130 543000) 0 nil])
([nil nil (("d" . -52) (undo-tree-id6 . -1) ("r" . -53) (undo-tree-id7 . -1) 54) nil (26665 52740 358130 161000) 0 nil])
([nil nil ((52 . 58)) nil (26665 52740 358128 868000) 0 nil])
([nil nil (("o" . -56) (undo-tree-id4 . -1) ("p" . -57) (undo-tree-id5 . -1) 58) nil (26665 52740 358128 499000) 0 nil])
([nil nil ((56 . 59)) nil (26665 52740 358126 847000) 0 nil])
([nil nil ((59 . 60)) nil (26665 52740 358126 590000) 0 nil])
([nil nil ((60 . 61)) nil (26665 52740 358126 236000) 0 nil])
([nil nil (("#" . -60) (undo-tree-id3 . -1) 61) nil (26665 52740 358125 867000) 0 nil])
([nil nil ((60 . 64)) nil (26665 52740 358124 921000) 0 nil])
([nil nil (("p" . -62) (undo-tree-id1 . -1) ("u" . -63) (undo-tree-id2 . -1) 64) nil (26665 52740 358124 397000) 0 nil])
([nil nil ((62 . 69)) nil (26665 52740 358122 697000) 0 nil])
([nil nil (("<" . -68) (undo-tree-id0 . -1) 69) nil (26665 52740 358121 813000) 0 nil])
([nil nil ((68 . 69)) nil (26665 52740 358113 51000) 0 nil])
([nil nil ((69 . 80)) nil (26665 52740 358108 816000) 0 nil])
([nil nil (("
                    }
                    else {
                        modules[cmodule].push(ast[i + 1].value);
                        code += ast[i + 1].value + \": \";
                        i += 2;
                    }" . -1907) (undo-tree-id51 . -225) (undo-tree-id52 . -49) (undo-tree-id53 . -49) (undo-tree-id54 . -49) (undo-tree-id55 . -22) (undo-tree-id56 . -22) (undo-tree-id57 . -86) (undo-tree-id58 . -86) (undo-tree-id59 . -86) (undo-tree-id60 . -49) (undo-tree-id61 . -49) (undo-tree-id62 . -49) (undo-tree-id63 . -86) (undo-tree-id64 . -225) (undo-tree-id65 . -225) 2132 (t 26665 52740 358645 858000)) nil (26665 52755 42586 507000) 0 nil])
([nil nil (("
                    if (cmodule == undefined) {" . 1819) (undo-tree-id72 . -48) (undo-tree-id73 . -48) (undo-tree-id74 . -48) (undo-tree-id75 . -48) (undo-tree-id76 . -48) (undo-tree-id77 . -48) (undo-tree-id78 . -48) (undo-tree-id79 . -48) (undo-tree-id80 . -48) (undo-tree-id81 . -48)) nil (26665 52762 45338 809000) 0 nil] [nil nil (("
                \"let\" {
                    if (cmodule == undefined) {" . 1795) (undo-tree-id45 . -72) (undo-tree-id46 . -72) (undo-tree-id47 . -72) (undo-tree-id48 . -72) (undo-tree-id49 . -72) (undo-tree-id50 . -72)) ((1795 . 1867)) (26665 52754 283659 182000) 0 nil])
([nil nil ((1859 . 1860)) nil (26665 52762 45333 736000) 0 nil])
nil
([nil nil (("<" . -1859) (undo-tree-id71 . -1) 1860) nil (26665 52762 45333 373000) 0 nil])
([nil nil ((1859 . 1860)) nil (26665 52762 45332 238000) 0 nil])
([nil nil (("	" . -1859) (undo-tree-id70 . -1) 1860) nil (26665 52762 45331 602000) 0 nil])
([nil nil ((" " . -1840) (undo-tree-id66 . -1) (" " . -1841) (undo-tree-id67 . -1) (" " . -1842) (undo-tree-id68 . -1) (" " . -1843) (undo-tree-id69 . -1) 1844) nil (26665 52762 45327 394000) 0 nil])
([nil nil (("
                \"using\" {
                    usings.push(ast[i + 1].value);
                    i++;
                    continue;
                }" . -2630) (undo-tree-id95 . -150) 2780 (t 26665 52762 45646 985000)) nil (26665 52791 388016 728000) 0 nil])
([nil nil (("
                \"module\" {
                    i++;
                    const name = compiler_ast(ast[i]).value;
                    i++;
                    cmodule = name;
                    modules[cmodule] = [];
                    code += \"const \" + name + \" = \" + compiler_ast(ast[i]).value + \";\";
                    cmodule = undefined;
                    continue;
                }" . -4002) (undo-tree-id93 . -394) (undo-tree-id94 . -25) 4396) nil (26665 52791 388015 859000) 0 nil])
([nil nil ((2743 . 2746)) nil (26665 52791 388013 814000) 0 nil])
([nil nil ((2746 . 2750)) nil (26665 52791 388013 594000) 0 nil])
([nil nil (("f" . -2749) (undo-tree-id92 . -1) 2750) nil (26665 52791 388013 211000) 0 nil])
([nil nil ((2749 . 2754)) nil (26665 52791 388012 468000) 0 nil])
([nil nil ((2754 . 2757)) nil (26665 52791 388012 209000) 0 nil])
([nil nil ((2757 . 2758)) nil (26665 52791 388011 558000) 0 nil])
([nil nil (("		" . 2755) (undo-tree-id91 . -2) (2757 . 2758)) nil (26665 52791 388011 93000) 0 nil])
([nil nil ((2756 . 2758)) nil (26665 52791 388010 218000) 0 nil])
([nil nil ((2755 . 2757)) nil (26665 52791 388009 902000) 0 nil])
([nil nil ((2757 . 2770)) nil (26665 52791 388009 681000) 0 nil])
([nil nil (("\"" . -2768) (undo-tree-id89 . -1) (" " . -2769) (undo-tree-id90 . -1) 2770) nil (26665 52791 388009 130000) 0 nil])
([nil nil ((2768 . 2776)) nil (26665 52791 388007 861000) 0 nil])
([nil nil (("\"" . -2775) (undo-tree-id88 . -1) 2776) nil (26665 52791 388007 478000) 0 nil])
([nil nil ((2775 . 2777)) nil (26665 52791 388006 588000) 0 nil])
([nil nil ((2777 . 2784)) nil (26665 52791 388006 322000) 0 nil])
([nil nil ((2784 . 2790)) nil (26665 52791 388006 36000) 0 nil])
([nil nil (("i" . -2788) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) ("r" . -2789) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) 2790) nil (26665 52791 388005 39000) 0 nil])
([nil nil ((2788 . 2793)) nil (26665 52791 387991 744000) 0 nil])
([nil nil (("
                    if (cmodule == undefined) {" . 2258) (undo-tree-id123 . -48) (undo-tree-id124 . -48) (undo-tree-id125 . -48) (undo-tree-id126 . -48) (t 26665 52791 388648 510000)) nil (26665 52816 407809 756000) 0 nil])
([nil nil (("
                    }
                    else {
                        modules[cmodule].push(ast[i + 1].value);
                        code += ast[i + 1].value + \": function \";
                        i++;
                    }" . -2303) (undo-tree-id120 . -231) (undo-tree-id121 . -231) (undo-tree-id122 . -231) 2534) nil (26665 52816 407807 341000) 0 nil])
([nil nil (("    " . 2279) (undo-tree-id116 . -4) (undo-tree-id117 . -4) (undo-tree-id118 . -4) (undo-tree-id119 . -4)) nil (26665 52816 407805 648000) 0 nil])
([nil nil (("
                    }
                    else {
                        modules[cmodule].push(name);
                        code += \"// Enum (\" + name + \")\\n\";
                        code += name + \": {\";
                        for (let j = 0; j < ast[i].value.length; ++j) {
                            const f = compiler_ast(ast[i].value[j]);
                            if (f.type == \"word\") {
                                code += f.value + \": \" + j + \",\";
                                code += j + \": \\\"\" + f.value + \"\\\",\";
                            }
                        }
                        code += \"},\";
                    }" . -4498) (undo-tree-id113 . -653) (undo-tree-id114 . -653) (undo-tree-id115 . -653) 5151) nil (26665 52817 46835 179000) 0 nil])
([nil nil (("
                    if (cmodule == undefined) {" . 3909) (undo-tree-id239 . -48) (undo-tree-id240 . -48) (undo-tree-id241 . -48) (undo-tree-id242 . -48) (undo-tree-id243 . -48) (undo-tree-id244 . -48) (undo-tree-id245 . -48) (undo-tree-id246 . -48) (undo-tree-id247 . -48) (undo-tree-id248 . -48) (undo-tree-id249 . -48) (undo-tree-id250 . -48) (undo-tree-id251 . -48) (undo-tree-id252 . -48) (undo-tree-id253 . -48) (undo-tree-id254 . -48)) nil (26665 52847 745029 59000) 0 nil] [nil nil (("e;
                    i++;
                    if (cmodule == undefined) {" . 3882) (undo-tree-id96 . -75) (undo-tree-id97 . -75) (undo-tree-id98 . -75) (undo-tree-id99 . -75) (undo-tree-id100 . -27) (undo-tree-id101 . -27) (undo-tree-id102 . -27) (undo-tree-id103 . -27) (undo-tree-id104 . -27) (undo-tree-id105 . -27) (undo-tree-id106 . -27) (undo-tree-id107 . -75) (undo-tree-id108 . -75) (undo-tree-id109 . -75) (undo-tree-id110 . -75) (undo-tree-id111 . -75) (undo-tree-id112 . -75)) ((3882 . 3957)) (26665 52816 407798 277000) 0 nil])
([nil nil (("    " . 3930) (undo-tree-id230 . -4) (undo-tree-id231 . -3) (undo-tree-id232 . -3) (undo-tree-id233 . -3) (undo-tree-id234 . -3) (undo-tree-id235 . -3) (undo-tree-id236 . -4) (undo-tree-id237 . -4) (undo-tree-id238 . -4)) nil (26665 52847 745021 601000) 0 nil])
nil
([nil nil (("    " . 3986) (undo-tree-id226 . -4) (undo-tree-id227 . -4) (undo-tree-id228 . -4) (undo-tree-id229 . -4)) nil (26665 52847 745017 385000) 0 nil])
([nil nil (("    " . 4040) (undo-tree-id222 . -4) (undo-tree-id223 . -4) (undo-tree-id224 . -4) (undo-tree-id225 . -4)) nil (26665 52847 745015 74000) 0 nil])
([nil nil (("    " . -4108) (undo-tree-id219 . -4) (undo-tree-id220 . -4) (undo-tree-id221 . -4) 4112) nil (26665 52847 745012 961000) 0 nil])
([nil nil (("    " . 4173) (undo-tree-id213 . -4) (undo-tree-id214 . -2) (undo-tree-id215 . -2) (undo-tree-id216 . -4) (undo-tree-id217 . -4) (undo-tree-id218 . -4)) nil (26665 52847 745010 974000) 0 nil])
([nil nil (("c" . 4233) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1)) nil (26665 52847 745008 96000) 0 nil])
([nil nil ((" " . -4230) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (" " . -4231) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (" " . -4232) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) 4233) nil (26665 52847 745005 37000) 0 nil])
([nil nil ((" " . -4291) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (" " . -4292) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (" " . -4293) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (" " . -4294) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) 4295) nil (26665 52847 744991 840000) 0 nil])
([nil nil (("                             " . 4201) (undo-tree-id138 . -29) (undo-tree-id139 . -29) (undo-tree-id140 . -24) (undo-tree-id141 . -24) (undo-tree-id142 . -24) (undo-tree-id143 . -24) (undo-tree-id144 . -24) (undo-tree-id145 . -29) (undo-tree-id146 . -29) (undo-tree-id147 . -29) (undo-tree-id148 . -24) (undo-tree-id149 . -29) (undo-tree-id150 . -29) (undo-tree-id151 . -29) (undo-tree-id152 . -29) (undo-tree-id153 . -29) (undo-tree-id154 . -29) (undo-tree-id155 . -29) (undo-tree-id156 . -29) (undo-tree-id157 . -29) (4230 . 4231)) nil (26665 52847 744979 976000) 0 nil])
([nil nil (("
" . -4201) (undo-tree-id136 . -1) (undo-tree-id137 . 1) 4202) nil (26665 52847 744970 381000) 0 nil])
([nil nil ((4201 . 4202)) nil (26665 52847 744969 4000) 0 nil])
([nil nil (("c" . -4201) (undo-tree-id135 . -1) 4202) nil (26665 52847 744968 647000) 0 nil])
([nil nil ((4201 . 4222)) nil (26665 52847 744967 872000) 0 nil])
([nil nil ((4222 . 4230)) nil (26665 52847 744967 584000) 0 nil])
([nil nil ((" " . -4353) (undo-tree-id131 . -1) (" " . -4354) (undo-tree-id132 . -1) (" " . -4355) (undo-tree-id133 . -1) (" " . -4356) (undo-tree-id134 . -1) 4357) nil (26665 52847 744966 600000) 0 nil])
([nil nil ((" " . -4375) (undo-tree-id127 . -1) (" " . -4376) (undo-tree-id128 . -1) (" " . -4377) (undo-tree-id129 . -1) (" " . -4378) (undo-tree-id130 . -1) 4379) nil (26665 52847 744963 826000) 0 nil])
([nil nil ((" " . 4397) (" " . 4397) (" " . 4397) (" " . 4397)) nil (26665 52847 744950 571000) 0 nil])
([nil nil (("
                    }
                    else {
                        modules[cmodule].push(name);
                        code += name + \": function (\";
                    }" . -4903) (undo-tree-id259 . -179) (undo-tree-id260 . -179) (undo-tree-id261 . -179) 5082 (t 26665 52847 746651 439000)) nil (26665 52854 512672 261000) 0 nil])
([nil nil (("
                    if (cmodule == undefined) {" . 4797) (undo-tree-id289 . -48) (undo-tree-id290 . -48) (undo-tree-id291 . -48) (undo-tree-id292 . -48) (undo-tree-id293 . -48) (undo-tree-id294 . -48) (undo-tree-id295 . -48) (undo-tree-id296 . -48) (undo-tree-id297 . -48) (undo-tree-id298 . -48) (undo-tree-id299 . -48) (undo-tree-id300 . -48)) nil (26665 52867 528246 962000) 0 nil] [nil nil (("ue[j]).value);
                    }
                    if (cmodule == undefined) {" . 4761) (undo-tree-id255 . -84) (undo-tree-id256 . -84) (undo-tree-id257 . -84) (undo-tree-id258 . -84)) ((4761 . 4845)) (26665 52854 116715 153000) 0 nil])
([nil nil ((" " . -4820) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) 4821) nil (26665 52867 528241 797000) 0 nil])
nil
([nil nil ((" " . 4820)) nil (26665 52867 528238 454000) 0 nil])
([nil nil ((" " . -4818) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (" " . -4819) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) 4820) nil (26665 52867 528237 658000) 0 nil])
([nil nil (("
        for (let j = 0; j < usings.length; ++j) {
            if (modules[usings[j]]) {
                if (modules[usings[j]].indexOf(obj.value) != -1) {
                    code += usings[j] + \".\";
                    break;
                }
            }
        }" . -6653) (undo-tree-id262 . -269) (undo-tree-id263 . -269) (undo-tree-id264 . -269) (undo-tree-id265 . -269) (undo-tree-id266 . -24) (undo-tree-id267 . -24) (undo-tree-id268 . -269) (undo-tree-id269 . -269) (undo-tree-id270 . -269) 6922) nil (26665 52867 528228 920000) 0 nil])
([nil nil (("
                    code += \"if (0) {}\";" . 3157) (undo-tree-id338 . -41) (t 26665 52867 529652 467000)) nil (26665 52966 212236 229000) 0 nil])
([nil nil ((3525 . 3526)) nil (26665 52966 212235 416000) 0 nil])
([nil nil (("]" . -3525) (undo-tree-id337 . -1) 3526) nil (26665 52966 212235 5000) 0 nil])
([nil nil ((3525 . 3529)) nil (26665 52966 212234 76000) 0 nil])
([nil nil ((3529 . 3544)) nil (26665 52966 212233 620000) 0 nil])
([nil nil (("j" . -3537) (undo-tree-id330 . -1) (" " . -3538) (undo-tree-id331 . -1) ("=" . -3539) (undo-tree-id332 . -1) ("=" . -3540) (undo-tree-id333 . -1) (" " . -3541) (undo-tree-id334 . -1) ("0" . -3542) (undo-tree-id335 . -1) (")" . -3543) (undo-tree-id336 . -1) 3544) nil (26665 52966 212233 1000) 0 nil])
([nil nil ((3537 . 3540)) nil (26665 52966 212228 492000) 0 nil])
([nil nil ((")" . -3539) (undo-tree-id329 . -1) 3540) nil (26665 52966 212228 187000) 0 nil])
([nil nil ((3539 . 3542)) nil (26665 52966 212227 466000) 0 nil])
([nil nil ((3542 . 3550)) nil (26665 52966 212227 204000) 0 nil])
([nil nil ((3550 . 3551)) nil (26665 52966 212226 985000) 0 nil])
([nil nil ((" " . -3549) (undo-tree-id327 . -1) ("+" . -3550) (undo-tree-id328 . -1) 3551) nil (26665 52966 212226 649000) 0 nil])
([nil nil (("
			   " . 3542) (undo-tree-id326 . -7)) nil (26665 52966 212225 316000) 0 nil])
([nil nil (("[" . -3541) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) 3542) nil (26665 52966 212224 511000) 0 nil])
([nil nil ((3541 . 3542)) nil (26665 52966 212222 6000) 0 nil])
([nil nil ((3542 . 3550)) nil (26665 52966 212221 755000) 0 nil])
([nil nil ((3550 . 3551)) nil (26665 52966 212221 542000) 0 nil])
([nil nil ((3542 . 3550)) nil (26665 52966 212221 265000) 0 nil])
([nil nil ((3550 . 3563)) nil (26665 52966 212220 982000) 0 nil])
([nil nil (("\"" . -3561) (undo-tree-id320 . -1) (" " . -3562) (undo-tree-id321 . -1) 3563) nil (26665 52966 212220 593000) 0 nil])
([nil nil ((3561 . 3565)) nil (26665 52966 212219 385000) 0 nil])
([nil nil (("i" . -3563) (undo-tree-id318 . -1) ("d" . -3564) (undo-tree-id319 . -1) 3565) nil (26665 52966 212218 915000) 0 nil])
([nil nil ((3563 . 3564)) nil (26665 52966 212217 592000) 0 nil])
([nil nil ((3564 . 3567)) nil (26665 52966 212217 317000) 0 nil])
([nil nil (("d" . -3564) (undo-tree-id315 . -1) (" " . -3565) (undo-tree-id316 . -1) ("\"" . -3566) (undo-tree-id317 . -1) 3567) nil (26665 52966 212216 168000) 0 nil])
([nil nil ((3564 . 3569)) nil (26665 52966 212214 452000) 0 nil])
([nil nil ((")" . -3567) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (";" . -3568) (undo-tree-id314 . -1) 3569) nil (26665 52966 212213 986000) 0 nil])
([nil nil ((3567 . 3568)) nil (26665 52966 212212 269000) 0 nil])
([nil nil (("l" . -3567) (undo-tree-id311 . -1) 3568) nil (26665 52966 212211 870000) 0 nil])
([nil nil ((3567 . 3568)) nil (26665 52966 212211 75000) 0 nil])
([nil nil (("p" . -3567) (undo-tree-id310 . -1) 3568) nil (26665 52966 212210 362000) 0 nil])
([nil nil ((3567 . 3568)) nil (26665 52966 212209 470000) 0 nil])
([nil nil (("e" . -3615) (undo-tree-id302 . -1) ("l" . -3616) (undo-tree-id303 . -1) ("s" . -3617) (undo-tree-id304 . -1) ("e" . -3618) (undo-tree-id305 . -1) (" " . -3619) (undo-tree-id306 . -1) ("i" . -3620) (undo-tree-id307 . -1) ("f" . -3621) (undo-tree-id308 . -1) (" " . -3622) (undo-tree-id309 . -1) 3623) nil (26665 52966 476597 919000) 0 nil])
([nil nil ((3577 . 3585)) nil (26665 52978 846400 248000) 0 nil] [nil nil ((3559 . 3563) (" " . 3558) (undo-tree-id301 . -1) (3559 . 3560)) (("
" . 3559) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (3558 . 3559) ("				" . 3559) (undo-tree-id342 . -4) (undo-tree-id343 . -4) (undo-tree-id344 . -4)) (26665 52966 212198 456000) 0 nil])
([nil nil ((3585 . 3590)) nil (26665 52978 846400 60000) 0 nil])
nil
([nil nil ((" " . -3589) (undo-tree-id352 . -1) 3590) nil (26665 52978 846399 741000) 0 nil])
([nil nil ((3589 . 3590)) nil (26665 52978 846399 104000) 0 nil])
([nil nil (("r" . -3588) (undo-tree-id350 . -1) ("e" . -3589) (undo-tree-id351 . -1) 3590) nil (26665 52978 846398 803000) 0 nil])
([nil nil ((3588 . 3591)) nil (26665 52978 846397 296000) 0 nil])
([nil nil ((3591 . 3599)) nil (26665 52978 846396 370000) 0 nil])
([nil nil ((3599 . 3600)) nil (26665 52978 846396 126000) 0 nil])
([nil nil ((3591 . 3599)) nil (26665 52978 846395 867000) 0 nil])
([nil nil ((3599 . 3610)) nil (26665 52978 846395 581000) 0 nil])
([nil nil (("=" . -3608) (undo-tree-id348 . -1) ("=" . -3609) (undo-tree-id349 . -1) 3610) nil (26665 52978 846395 231000) 0 nil])
([nil nil ((3608 . 3613)) nil (26665 52978 846394 173000) 0 nil])
([nil nil (("e" . -3612) (undo-tree-id347 . -1) 3613) nil (26665 52978 846393 760000) 0 nil])
([nil nil ((3612 . 3613)) nil (26665 52978 846392 992000) 0 nil])
([nil nil (("i" . -3612) (undo-tree-id346 . -1) 3613) nil (26665 52978 846392 683000) 0 nil])
([nil nil ((3612 . 3620)) nil (26665 52978 846391 719000) 0 nil])
([nil nil (("\"" . -3619) (undo-tree-id345 . -1) 3620) nil (26665 52978 846390 840000) 0 nil])
([nil current ((3619 . 3622)) nil (26665 52978 846380 438000) 0 nil])
nil
