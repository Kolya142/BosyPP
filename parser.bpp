fn parser(toks, state = 0) {
    let ast = [];
    while (toks.length) {
        const tok = toks[0];
        toks = toks.slice(1);
        if (/[0-9]/.test(tok[0]) || tok[0] == '-' && /[0-9]/.test(tok[1])) {
            ast.push({"type": "number", "value": Number(tok)});
        }
        elif (tok[0] == "\"" || tok[0] == "'") {
            ast.push({"type": "string", "value": tok.substr(1, tok.length - 2)});
        }
        elif (state == 1 && tok == ")") {
            break;
        }
        elif (state == 2 && tok == "}") {
            break;
        }
        elif (tok == "(") {
            const inner = parser(toks, 1);
            toks = inner.tokens;
            ast.push({"type": "expr", "value": inner.ast});
        }
        elif (tok == "{") {
            const inner = parser(toks, 2);
            toks = inner.tokens;
            ast.push({"type": "block", "value": inner.ast});
        }
        else {
            ast.push({"type": "word", "value": tok});
        }
    }
    return {"ast": ast, "tokens": toks};
}
